
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'

def DEFAULT_COMPILE_SDK_VERSION = 28
def DEFAULT_BUILD_TOOLS_VERSION = '28.0.3'
def DEFAULT_MIN_SDK_VERSION = 16
def DEFAULT_TARGET_SDK_VERSION = 28

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
    buildToolsVersion safeExtGet('buildToolsVersion', DEFAULT_BUILD_TOOLS_VERSION)
    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
        targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
        versionCode 1
        versionName "1.0"
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    maven {
        url "$projectDir/../node_modules/react-native/android"
    }
    mavenCentral()
}

dependencies {
    implementation(name:'sdk-release', ext:'aar')
    implementation 'com.facebook.react:react-native:+'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.code.gson:gson:2.8.4'
    implementation 'com.firebase:firebase-jobdispatcher:0.8.5'
}

def configureReactNativePom(def pom) {
    def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)

    pom.project {
        name packageJson.title
        artifactId packageJson.name
        version = packageJson.version
        group = "com.selligent"
        description packageJson.description
        url packageJson.repository.baseUrl

        licenses {
            license {
                name packageJson.license
                url packageJson.repository.baseUrl + '/blob/master/' + packageJson.licenseFilename
                distribution 'repo'
            }
        }
    }
}

afterEvaluate { project ->

    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.bootClasspath)
        classpath += files(project.getConfigurations().getByName('compile').asList())
        include '**/*.java'
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
        include '**/*.java'
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task "jar${name}"(type: Jar, dependsOn: variant.javaCompileProvider.get()) {
            from variant.javaCompileProvider.get().destinationDir
        }
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocJar
    }

    task installArchives(type: Upload) {
        configuration = configurations.archives
        repositories.mavenDeployer {
            repository url: "file://${projectDir}/../android/maven"

            configureReactNativePom pom
        }
    }
}

def loadSelligentSettings() {
    def selligentFileName = "selligent.json"
    println("Reading Selligent settings from: $selligentFileName")

    File f = new File("$project.rootDir/../$selligentFileName");

    def resultingSettings = null
    if (f.exists()) {
        resultingSettings = ""
        f.eachLine { String line ->
            resultingSettings += line.replace("\"", "\\\"").replaceAll("\\s", "")
        }
    } else {
        throw new InvalidUserDataException("The selligent.json file could not be found. Please make sure you provide this file in the root of this project.")
    }

    return resultingSettings
}

tasks.whenTaskAdded { task ->
    task.doFirst() {
        android.libraryVariants.all { variant ->
            if (task.name.toLowerCase() == "pre${variant.name}build") {
                def selligentSettings = loadSelligentSettings()
                if (selligentSettings != null) {
                    variant.buildConfigField "String", "SELLIGENT_SETTINGS", "\"$selligentSettings\""
                }
            }

        }
    }
}
